# -*- coding: utf-8 -*-
"""done_done.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NZGsEAKOQIsbS21R3CcR2nSzKjO399m-
"""

!pip install -q google-generativeai
!pip install langchain
!pip install pypdf
!pip install PyPDF2
!pip install faiss-cpu==1.7.4

import google.generativeai as palm
from langchain.llms import GooglePalm
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings import GooglePalmEmbeddings
from langchain.chains.question_answering import load_qa_chain
from PyPDF2 import PdfReader
import os
import csv

os.environ['GOOGLE_API_KEY'] = 'enter_your_google_Api_here'
embeddings = GooglePalmEmbeddings()
# Load the PDF dataset
folder_path = "/home/rishwanth/Intern_stuff/pdfs_5"
for filename in os.listdir(folder_path):
    l=[];
    file_path = os.path.join(folder_path, filename)
    pdf_file = open(file_path, 'rb')
    pdf_reader = PdfReader(pdf_file)
    text=""
    for page_num in range(len(pdf_reader.pages)):
        page = pdf_reader.pages[page_num]
        page_text = page.extract_text()
        text=text+page_text


    pdf_file.close()
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=500,chunk_overlap=200,length_function=len)
    chunks = text_splitter.split_text(text=text)
    VectorStore = FAISS.from_texts(chunks, embedding=embeddings)
    queries = ["What is the Date of Issue", "What is the application number", "What is the Location","Who is the applicant","Give a detailed summary of 1000 words"]

    responses_list = []
    for query in queries:
        if query:

            docs = VectorStore.similarity_search(query=query, k=3)
            llm = GooglePalm()
            llm.temperature = 0.1
            chain = load_qa_chain(llm=llm, chain_type="stuff")
            response = chain.run(input_documents=docs, question=query)


            if query=="What is the Date of Issue":
                query="Date of Issue"

            elif query=="What is the application number":
                query="Applicant number"

            elif query=="What is the Location":
                query="Location"

            elif query=="Who is the applicant":
                query="Applicant Name"

            else:
                query="Summary"

            response_dict = {"Query": query, "Response": response}
            responses_list.append(response_dict)

    csv_file = "responses_5.csv"
    file_exists = False
    try:
        with open(csv_file, 'r') as file:
            file_exists = True
    except FileNotFoundError:
        file_exists = False


    with open(csv_file, 'a', newline='') as file:
        fieldnames = ["Query", "Response"]
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()

        for row in responses_list:
            writer.writerow(row)

    print(f"Data has been saved to {csv_file}")

